import java.io.*;
import java.net.Socket;
import java.nio.file.Files;
import java.nio.file.Paths;
import java.util.concurrent.TimeUnit;

/*
E://test.txt
 */
public class Client implements AutoCloseable {
    private final Socket socket;

    public Client(String host, int port) throws IOException {
        this.socket = new Socket(host, port);
    }

    public static void main(String[] args) throws Exception {
        if (args.length != 3) {
            System.out.println("Use: java Client [HOST] [PORT] [FILE]");
            System.exit(1);
        }

        String host = args[0];
        int port = Integer.parseInt(args[1]);
        String fileName = args[2];
        System.out.println("Connecting...");

        try (Client client = new Client(host, port)) {
            System.out.println("Connecting... Done.");
            client.sendLargeFileToSocket(fileName);
        }
    }

    public void sendFileToSocket(String fileName) throws IOException {
        byte[] arr = Files.readAllBytes(Paths.get(fileName));
        try (OutputStream outputStream = socket.getOutputStream()) {
            System.out.println("Client: start transport " + fileName + ", " + arr.length + " bytes");
            long start = System.nanoTime();
            outputStream.write(arr);
            long finish = System.nanoTime();
            System.out.println("the program copied the file in " + nanosToSeconds(start, finish) + " " + "seconds");
        }
    }

    public void sendLargeFileToSocket(String fileName) throws IOException, InterruptedException {
        long fileLength = new File(fileName).length();
        byte[] buffer = new byte[1024 * 1024];

        try (InputStream in = new FileInputStream(fileName);
             OutputStream out = socket.getOutputStream()) {
            long total = 0;
            int n;
            long start = System.nanoTime();
            while ((n = in.read(buffer)) != -1) {
                out.write(buffer, 0, n);
                //Thread.sleep(100);
                total += n;
                System.out.print("\rPercent copied is  " + percentsCopied(fileLength, total) + " %");
            }
            long finish = System.nanoTime();
            System.out.println("\nThe program copied the file in " + nanosToSeconds(start, finish) + " seconds");
        }
    }

    private long percentsCopied(long fileLength, long copiedSoFar) {
        long lengthFileMb = (fileLength / 1024) / 1024;
        long copiedSoFarMb = (copiedSoFar / 1024) / 1024;
        return 100 - (100 - Math.round(((double) copiedSoFarMb / lengthFileMb) * 100));
    }

    private long nanosToSeconds(long startNs, long finishNs) {
        return TimeUnit.NANOSECONDS.toSeconds(finishNs - startNs);
    }

    @Override
    public void close() throws Exception {
        socket.close();
    }
}
